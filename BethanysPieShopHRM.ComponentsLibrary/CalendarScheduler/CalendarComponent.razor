@using BethanysPieShopHRM.Shared.Models
@using Microsoft.AspNetCore.Components.Web
@using BethanysPieShopHRM.ComponentsLibrary.CalendarScheduler

<select @onchange="LoadCalendar">
    @foreach (string monthName in monthNames)
    {
        <option>@monthName</option>
    }
</select>

<table class="table table-striped">
    <thead>
        <tr>
            @foreach (string dayName in days)
            {
                <th>
                    @dayName
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach(var week in weeks)
        {
            @UpdateWeek(week);
            <CascadingValue Value="@CurrentWeek" Name="DayEvents">
                <CalendarWeek/>
            </CascadingValue>
        }
    </tbody>
</table>

@code {
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<WeekClass> weeks = new List<WeekClass>();
    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);
    
    private WeekClass CurrentWeek { get; set; }

    private string UpdateWeek(WeekClass _newWeek)
    {
        CurrentWeek = _newWeek;
        return "";
    }

    protected override void OnInitialized()
    {
        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalendarHead();
        GeneratorCalendarBody();
        LoadCalendar(null);
        base.OnInitialized();
    }

    private void Write()
    {
        Console.WriteLine("Dinmor");
    }

    private void LoadCalendar(ChangeEventArgs e)
    {
        string month = e != null ? e.Value.ToString() : "January";
        int monthIndex = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);
        GeneratorCalendarBody();

    }

    private void GenerateCalendarHead()
    {
        days = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.DayNames.ToList();
    }

    private void GeneratorCalendarBody()
    {
        weeks.Clear();
        int weekDayCounter = 0;
        WeekClass week = new WeekClass();
        List<DayEvent> dates = new List<DayEvent>();
        int totalDays = endDate.Day;
        int totalDaysAdded = 0;

        // Iterate through all days from startdate to enddate
        for (DateTime currentDay = startDate; currentDay <= endDate;)
        {
            // Get index of the currentDay
            int weekDayIndex = (int)currentDay.DayOfWeek;

            if (weekDayIndex == weekDayCounter)
            {   
                dates.Add(new DayEvent()
                {
                    DateValue = currentDay.ToString("dd-MMM-yyyy"),
                    DayName = currentDay.ToString("dddd")

                });
                currentDay = currentDay.AddDays(1);
                totalDaysAdded++;
            } 
            else
            {
                dates.Add(null);
            }

            // If we've reached saturday (index 6) add the week and reset dayCounter
            if (weekDayCounter == 6)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);

                dates = new List<DayEvent>();
                weekDayCounter = 0;
            }
            else
            {
                weekDayCounter++;    
            }
            
            // If there are no more days to add, then add the week and break
            if (totalDaysAdded == totalDays)
            {
                // foreach empty day add a null value
                for (int i = weekDayCounter; i < 7; i++)
                {
                    dates.Add(null);
                }
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }
        }
    }
}
